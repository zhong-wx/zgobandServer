// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package zgobandRPC

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Account
//  - Nickname
//  - Core
//  - WinRound
//  - LoseRound
//  - DrawRound
//  - EscapeRound
//  - IsReady
type PlayerInfo struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  Nickname string `thrift:"nickname,2" db:"nickname" json:"nickname"`
  Core int32 `thrift:"core,3" db:"core" json:"core"`
  WinRound int32 `thrift:"winRound,4" db:"winRound" json:"winRound"`
  LoseRound int32 `thrift:"loseRound,5" db:"loseRound" json:"loseRound"`
  DrawRound int32 `thrift:"drawRound,6" db:"drawRound" json:"drawRound"`
  EscapeRound int32 `thrift:"escapeRound,7" db:"escapeRound" json:"escapeRound"`
  IsReady *bool `thrift:"isReady,8" db:"isReady" json:"isReady,omitempty"`
}

func NewPlayerInfo() *PlayerInfo {
  return &PlayerInfo{}
}


func (p *PlayerInfo) GetAccount() string {
  return p.Account
}

func (p *PlayerInfo) GetNickname() string {
  return p.Nickname
}

func (p *PlayerInfo) GetCore() int32 {
  return p.Core
}

func (p *PlayerInfo) GetWinRound() int32 {
  return p.WinRound
}

func (p *PlayerInfo) GetLoseRound() int32 {
  return p.LoseRound
}

func (p *PlayerInfo) GetDrawRound() int32 {
  return p.DrawRound
}

func (p *PlayerInfo) GetEscapeRound() int32 {
  return p.EscapeRound
}
var PlayerInfo_IsReady_DEFAULT bool
func (p *PlayerInfo) GetIsReady() bool {
  if !p.IsSetIsReady() {
    return PlayerInfo_IsReady_DEFAULT
  }
return *p.IsReady
}
func (p *PlayerInfo) IsSetIsReady() bool {
  return p.IsReady != nil
}

func (p *PlayerInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PlayerInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *PlayerInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nickname = v
}
  return nil
}

func (p *PlayerInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Core = v
}
  return nil
}

func (p *PlayerInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.WinRound = v
}
  return nil
}

func (p *PlayerInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LoseRound = v
}
  return nil
}

func (p *PlayerInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DrawRound = v
}
  return nil
}

func (p *PlayerInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.EscapeRound = v
}
  return nil
}

func (p *PlayerInfo)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IsReady = &v
}
  return nil
}

func (p *PlayerInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PlayerInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlayerInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *PlayerInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nickname: ", p), err) }
  if err := oprot.WriteString(string(p.Nickname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nickname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nickname: ", p), err) }
  return err
}

func (p *PlayerInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("core", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:core: ", p), err) }
  if err := oprot.WriteI32(int32(p.Core)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.core (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:core: ", p), err) }
  return err
}

func (p *PlayerInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("winRound", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:winRound: ", p), err) }
  if err := oprot.WriteI32(int32(p.WinRound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.winRound (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:winRound: ", p), err) }
  return err
}

func (p *PlayerInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loseRound", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:loseRound: ", p), err) }
  if err := oprot.WriteI32(int32(p.LoseRound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loseRound (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:loseRound: ", p), err) }
  return err
}

func (p *PlayerInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("drawRound", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:drawRound: ", p), err) }
  if err := oprot.WriteI32(int32(p.DrawRound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.drawRound (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:drawRound: ", p), err) }
  return err
}

func (p *PlayerInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("escapeRound", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:escapeRound: ", p), err) }
  if err := oprot.WriteI32(int32(p.EscapeRound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.escapeRound (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:escapeRound: ", p), err) }
  return err
}

func (p *PlayerInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsReady() {
    if err := oprot.WriteFieldBegin("isReady", thrift.BOOL, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:isReady: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IsReady)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isReady (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:isReady: ", p), err) }
  }
  return err
}

func (p *PlayerInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerInfo(%+v)", *p)
}

// Attributes:
//  - DeskID
//  - Player1
//  - Player2
//  - Ready1
//  - Ready2
type Desk struct {
  DeskID int32 `thrift:"deskID,1" db:"deskID" json:"deskID"`
  Player1 string `thrift:"player1,2" db:"player1" json:"player1"`
  Player2 string `thrift:"player2,3" db:"player2" json:"player2"`
  Ready1 bool `thrift:"ready1,4" db:"ready1" json:"ready1"`
  Ready2 bool `thrift:"ready2,5" db:"ready2" json:"ready2"`
}

func NewDesk() *Desk {
  return &Desk{}
}


func (p *Desk) GetDeskID() int32 {
  return p.DeskID
}

func (p *Desk) GetPlayer1() string {
  return p.Player1
}

func (p *Desk) GetPlayer2() string {
  return p.Player2
}

func (p *Desk) GetReady1() bool {
  return p.Ready1
}

func (p *Desk) GetReady2() bool {
  return p.Ready2
}
func (p *Desk) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Desk)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DeskID = v
}
  return nil
}

func (p *Desk)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Player1 = v
}
  return nil
}

func (p *Desk)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Player2 = v
}
  return nil
}

func (p *Desk)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Ready1 = v
}
  return nil
}

func (p *Desk)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Ready2 = v
}
  return nil
}

func (p *Desk) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Desk"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Desk) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deskID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deskID: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deskID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deskID: ", p), err) }
  return err
}

func (p *Desk) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("player1", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:player1: ", p), err) }
  if err := oprot.WriteString(string(p.Player1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.player1 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:player1: ", p), err) }
  return err
}

func (p *Desk) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("player2", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:player2: ", p), err) }
  if err := oprot.WriteString(string(p.Player2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.player2 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:player2: ", p), err) }
  return err
}

func (p *Desk) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ready1", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ready1: ", p), err) }
  if err := oprot.WriteBool(bool(p.Ready1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ready1 (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ready1: ", p), err) }
  return err
}

func (p *Desk) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ready2", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ready2: ", p), err) }
  if err := oprot.WriteBool(bool(p.Ready2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ready2 (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ready2: ", p), err) }
  return err
}

func (p *Desk) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Desk(%+v)", *p)
}

// Attributes:
//  - Type
//  - Why
type InvalidOperation struct {
  Type string `thrift:"type,1" db:"type" json:"type"`
  Why string `thrift:"why,2" db:"why" json:"why"`
}

func NewInvalidOperation() *InvalidOperation {
  return &InvalidOperation{}
}


func (p *InvalidOperation) GetType() string {
  return p.Type
}

func (p *InvalidOperation) GetWhy() string {
  return p.Why
}
func (p *InvalidOperation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidOperation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *InvalidOperation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Why = v
}
  return nil
}

func (p *InvalidOperation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvalidOperation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidOperation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *InvalidOperation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("why", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:why: ", p), err) }
  if err := oprot.WriteString(string(p.Why)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.why (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:why: ", p), err) }
  return err
}

func (p *InvalidOperation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidOperation(%+v)", *p)
}

func (p *InvalidOperation) Error() string {
  return p.String()
}

type LoginAndReg interface {
  // Parameters:
  //  - Account
  //  - Password
  Login(ctx context.Context, account string, password string) (r *PlayerInfo, err error)
  // Parameters:
  //  - Account
  //  - Password
  //  - Nickname
  Reg(ctx context.Context, account string, password string, nickname string) (r bool, err error)
}

type LoginAndRegClient struct {
  c thrift.TClient
}

func NewLoginAndRegClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LoginAndRegClient {
  return &LoginAndRegClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewLoginAndRegClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LoginAndRegClient {
  return &LoginAndRegClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewLoginAndRegClient(c thrift.TClient) *LoginAndRegClient {
  return &LoginAndRegClient{
    c: c,
  }
}

func (p *LoginAndRegClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Account
//  - Password
func (p *LoginAndRegClient) Login(ctx context.Context, account string, password string) (r *PlayerInfo, err error) {
  var _args0 LoginAndRegLoginArgs
  _args0.Account = account
  _args0.Password = password
  var _result1 LoginAndRegLoginResult
  if err = p.Client_().Call(ctx, "login", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Account
//  - Password
//  - Nickname
func (p *LoginAndRegClient) Reg(ctx context.Context, account string, password string, nickname string) (r bool, err error) {
  var _args2 LoginAndRegRegArgs
  _args2.Account = account
  _args2.Password = password
  _args2.Nickname = nickname
  var _result3 LoginAndRegRegResult
  if err = p.Client_().Call(ctx, "reg", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type LoginAndRegProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler LoginAndReg
}

func (p *LoginAndRegProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *LoginAndRegProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *LoginAndRegProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewLoginAndRegProcessor(handler LoginAndReg) *LoginAndRegProcessor {

  self4 := &LoginAndRegProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["login"] = &loginAndRegProcessorLogin{handler:handler}
  self4.processorMap["reg"] = &loginAndRegProcessorReg{handler:handler}
return self4
}

func (p *LoginAndRegProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type loginAndRegProcessorLogin struct {
  handler LoginAndReg
}

func (p *loginAndRegProcessorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := LoginAndRegLoginArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("login", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := LoginAndRegLoginResult{}
var retval *PlayerInfo
  var err2 error
  if retval, err2 = p.handler.Login(ctx, args.Account, args.Password); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login: " + err2.Error())
    oprot.WriteMessageBegin("login", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("login", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type loginAndRegProcessorReg struct {
  handler LoginAndReg
}

func (p *loginAndRegProcessorReg) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := LoginAndRegRegArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("reg", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := LoginAndRegRegResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Reg(ctx, args.Account, args.Password, args.Nickname); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reg: " + err2.Error())
    oprot.WriteMessageBegin("reg", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("reg", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Account
//  - Password
type LoginAndRegLoginArgs struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  Password string `thrift:"password,2" db:"password" json:"password"`
}

func NewLoginAndRegLoginArgs() *LoginAndRegLoginArgs {
  return &LoginAndRegLoginArgs{}
}


func (p *LoginAndRegLoginArgs) GetAccount() string {
  return p.Account
}

func (p *LoginAndRegLoginArgs) GetPassword() string {
  return p.Password
}
func (p *LoginAndRegLoginArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginAndRegLoginArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *LoginAndRegLoginArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *LoginAndRegLoginArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("login_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginAndRegLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *LoginAndRegLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err) }
  return err
}

func (p *LoginAndRegLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginAndRegLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LoginAndRegLoginResult struct {
  Success *PlayerInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewLoginAndRegLoginResult() *LoginAndRegLoginResult {
  return &LoginAndRegLoginResult{}
}

var LoginAndRegLoginResult_Success_DEFAULT *PlayerInfo
func (p *LoginAndRegLoginResult) GetSuccess() *PlayerInfo {
  if !p.IsSetSuccess() {
    return LoginAndRegLoginResult_Success_DEFAULT
  }
return p.Success
}
func (p *LoginAndRegLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *LoginAndRegLoginResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginAndRegLoginResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PlayerInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *LoginAndRegLoginResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("login_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginAndRegLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *LoginAndRegLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginAndRegLoginResult(%+v)", *p)
}

// Attributes:
//  - Account
//  - Password
//  - Nickname
type LoginAndRegRegArgs struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  Password string `thrift:"password,2" db:"password" json:"password"`
  Nickname string `thrift:"nickname,3" db:"nickname" json:"nickname"`
}

func NewLoginAndRegRegArgs() *LoginAndRegRegArgs {
  return &LoginAndRegRegArgs{}
}


func (p *LoginAndRegRegArgs) GetAccount() string {
  return p.Account
}

func (p *LoginAndRegRegArgs) GetPassword() string {
  return p.Password
}

func (p *LoginAndRegRegArgs) GetNickname() string {
  return p.Nickname
}
func (p *LoginAndRegRegArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginAndRegRegArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *LoginAndRegRegArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *LoginAndRegRegArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Nickname = v
}
  return nil
}

func (p *LoginAndRegRegArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reg_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginAndRegRegArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *LoginAndRegRegArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err) }
  return err
}

func (p *LoginAndRegRegArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nickname: ", p), err) }
  if err := oprot.WriteString(string(p.Nickname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nickname (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nickname: ", p), err) }
  return err
}

func (p *LoginAndRegRegArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginAndRegRegArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LoginAndRegRegResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewLoginAndRegRegResult() *LoginAndRegRegResult {
  return &LoginAndRegRegResult{}
}

var LoginAndRegRegResult_Success_DEFAULT bool
func (p *LoginAndRegRegResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return LoginAndRegRegResult_Success_DEFAULT
  }
return *p.Success
}
func (p *LoginAndRegRegResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *LoginAndRegRegResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginAndRegRegResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *LoginAndRegRegResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reg_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginAndRegRegResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *LoginAndRegRegResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginAndRegRegResult(%+v)", *p)
}


type GameHall interface {
  // Parameters:
  //  - Account
  //  - DeskID
  //  - Seat
  SitDown(ctx context.Context, account string, deskID int32, seat int32) (r bool, err error)
  // Parameters:
  //  - DeskID
  //  - SeatID
  GetSeatInfo(ctx context.Context, deskID int32, seatID int32) (r *PlayerInfo, err error)
  // Parameters:
  //  - Account
  //  - DeskID
  //  - SeatID
  //  - IsReady
  SetReady(ctx context.Context, account string, deskID int32, seatID int32, isReady bool) (err error)
  // Parameters:
  //  - Account
  //  - DeskID
  //  - SeatID
  LeaveSeat(ctx context.Context, account string, deskID int32, seatID int32) (r int32, err error)
  // Parameters:
  //  - Account
  AutoMatch(ctx context.Context, account string) (r map[string]int32, err error)
  // Parameters:
  //  - ID
  GetSavedGame(ctx context.Context, id int32) (r string, err error)
  // Parameters:
  //  - Account
  GetSavedGameList(ctx context.Context, account string) (r []string, err error)
  GetDeskList(ctx context.Context) (r []*Desk, err error)
}

type GameHallClient struct {
  c thrift.TClient
}

func NewGameHallClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *GameHallClient {
  return &GameHallClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewGameHallClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *GameHallClient {
  return &GameHallClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewGameHallClient(c thrift.TClient) *GameHallClient {
  return &GameHallClient{
    c: c,
  }
}

func (p *GameHallClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Account
//  - DeskID
//  - Seat
func (p *GameHallClient) SitDown(ctx context.Context, account string, deskID int32, seat int32) (r bool, err error) {
  var _args11 GameHallSitDownArgs
  _args11.Account = account
  _args11.DeskID = deskID
  _args11.Seat = seat
  var _result12 GameHallSitDownResult
  if err = p.Client_().Call(ctx, "sitDown", &_args11, &_result12); err != nil {
    return
  }
  return _result12.GetSuccess(), nil
}

// Parameters:
//  - DeskID
//  - SeatID
func (p *GameHallClient) GetSeatInfo(ctx context.Context, deskID int32, seatID int32) (r *PlayerInfo, err error) {
  var _args13 GameHallGetSeatInfoArgs
  _args13.DeskID = deskID
  _args13.SeatID = seatID
  var _result14 GameHallGetSeatInfoResult
  if err = p.Client_().Call(ctx, "getSeatInfo", &_args13, &_result14); err != nil {
    return
  }
  return _result14.GetSuccess(), nil
}

// Parameters:
//  - Account
//  - DeskID
//  - SeatID
//  - IsReady
func (p *GameHallClient) SetReady(ctx context.Context, account string, deskID int32, seatID int32, isReady bool) (err error) {
  var _args15 GameHallSetReadyArgs
  _args15.Account = account
  _args15.DeskID = deskID
  _args15.SeatID = seatID
  _args15.IsReady = isReady
  var _result16 GameHallSetReadyResult
  if err = p.Client_().Call(ctx, "setReady", &_args15, &_result16); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Account
//  - DeskID
//  - SeatID
func (p *GameHallClient) LeaveSeat(ctx context.Context, account string, deskID int32, seatID int32) (r int32, err error) {
  var _args17 GameHallLeaveSeatArgs
  _args17.Account = account
  _args17.DeskID = deskID
  _args17.SeatID = seatID
  var _result18 GameHallLeaveSeatResult
  if err = p.Client_().Call(ctx, "leaveSeat", &_args17, &_result18); err != nil {
    return
  }
  return _result18.GetSuccess(), nil
}

// Parameters:
//  - Account
func (p *GameHallClient) AutoMatch(ctx context.Context, account string) (r map[string]int32, err error) {
  var _args19 GameHallAutoMatchArgs
  _args19.Account = account
  var _result20 GameHallAutoMatchResult
  if err = p.Client_().Call(ctx, "autoMatch", &_args19, &_result20); err != nil {
    return
  }
  return _result20.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *GameHallClient) GetSavedGame(ctx context.Context, id int32) (r string, err error) {
  var _args21 GameHallGetSavedGameArgs
  _args21.ID = id
  var _result22 GameHallGetSavedGameResult
  if err = p.Client_().Call(ctx, "getSavedGame", &_args21, &_result22); err != nil {
    return
  }
  return _result22.GetSuccess(), nil
}

// Parameters:
//  - Account
func (p *GameHallClient) GetSavedGameList(ctx context.Context, account string) (r []string, err error) {
  var _args23 GameHallGetSavedGameListArgs
  _args23.Account = account
  var _result24 GameHallGetSavedGameListResult
  if err = p.Client_().Call(ctx, "getSavedGameList", &_args23, &_result24); err != nil {
    return
  }
  return _result24.GetSuccess(), nil
}

func (p *GameHallClient) GetDeskList(ctx context.Context) (r []*Desk, err error) {
  var _args25 GameHallGetDeskListArgs
  var _result26 GameHallGetDeskListResult
  if err = p.Client_().Call(ctx, "getDeskList", &_args25, &_result26); err != nil {
    return
  }
  return _result26.GetSuccess(), nil
}

type GameHallProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler GameHall
}

func (p *GameHallProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *GameHallProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *GameHallProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewGameHallProcessor(handler GameHall) *GameHallProcessor {

  self27 := &GameHallProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self27.processorMap["sitDown"] = &gameHallProcessorSitDown{handler:handler}
  self27.processorMap["getSeatInfo"] = &gameHallProcessorGetSeatInfo{handler:handler}
  self27.processorMap["setReady"] = &gameHallProcessorSetReady{handler:handler}
  self27.processorMap["leaveSeat"] = &gameHallProcessorLeaveSeat{handler:handler}
  self27.processorMap["autoMatch"] = &gameHallProcessorAutoMatch{handler:handler}
  self27.processorMap["getSavedGame"] = &gameHallProcessorGetSavedGame{handler:handler}
  self27.processorMap["getSavedGameList"] = &gameHallProcessorGetSavedGameList{handler:handler}
  self27.processorMap["getDeskList"] = &gameHallProcessorGetDeskList{handler:handler}
return self27
}

func (p *GameHallProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x28 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x28.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x28

}

type gameHallProcessorSitDown struct {
  handler GameHall
}

func (p *gameHallProcessorSitDown) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameHallSitDownArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sitDown", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameHallSitDownResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SitDown(ctx, args.Account, args.DeskID, args.Seat); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sitDown: " + err2.Error())
    oprot.WriteMessageBegin("sitDown", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("sitDown", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameHallProcessorGetSeatInfo struct {
  handler GameHall
}

func (p *gameHallProcessorGetSeatInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameHallGetSeatInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSeatInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameHallGetSeatInfoResult{}
var retval *PlayerInfo
  var err2 error
  if retval, err2 = p.handler.GetSeatInfo(ctx, args.DeskID, args.SeatID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSeatInfo: " + err2.Error())
    oprot.WriteMessageBegin("getSeatInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSeatInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameHallProcessorSetReady struct {
  handler GameHall
}

func (p *gameHallProcessorSetReady) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameHallSetReadyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setReady", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameHallSetReadyResult{}
  var err2 error
  if err2 = p.handler.SetReady(ctx, args.Account, args.DeskID, args.SeatID, args.IsReady); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setReady: " + err2.Error())
    oprot.WriteMessageBegin("setReady", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("setReady", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameHallProcessorLeaveSeat struct {
  handler GameHall
}

func (p *gameHallProcessorLeaveSeat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameHallLeaveSeatArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("leaveSeat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameHallLeaveSeatResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.LeaveSeat(ctx, args.Account, args.DeskID, args.SeatID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaveSeat: " + err2.Error())
    oprot.WriteMessageBegin("leaveSeat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("leaveSeat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameHallProcessorAutoMatch struct {
  handler GameHall
}

func (p *gameHallProcessorAutoMatch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameHallAutoMatchArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("autoMatch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameHallAutoMatchResult{}
var retval map[string]int32
  var err2 error
  if retval, err2 = p.handler.AutoMatch(ctx, args.Account); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing autoMatch: " + err2.Error())
    oprot.WriteMessageBegin("autoMatch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("autoMatch", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameHallProcessorGetSavedGame struct {
  handler GameHall
}

func (p *gameHallProcessorGetSavedGame) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameHallGetSavedGameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSavedGame", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameHallGetSavedGameResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetSavedGame(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSavedGame: " + err2.Error())
    oprot.WriteMessageBegin("getSavedGame", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getSavedGame", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameHallProcessorGetSavedGameList struct {
  handler GameHall
}

func (p *gameHallProcessorGetSavedGameList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameHallGetSavedGameListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSavedGameList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameHallGetSavedGameListResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetSavedGameList(ctx, args.Account); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSavedGameList: " + err2.Error())
    oprot.WriteMessageBegin("getSavedGameList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSavedGameList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameHallProcessorGetDeskList struct {
  handler GameHall
}

func (p *gameHallProcessorGetDeskList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameHallGetDeskListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getDeskList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameHallGetDeskListResult{}
var retval []*Desk
  var err2 error
  if retval, err2 = p.handler.GetDeskList(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDeskList: " + err2.Error())
    oprot.WriteMessageBegin("getDeskList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getDeskList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Account
//  - DeskID
//  - Seat
type GameHallSitDownArgs struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  DeskID int32 `thrift:"deskID,2" db:"deskID" json:"deskID"`
  Seat int32 `thrift:"seat,3" db:"seat" json:"seat"`
}

func NewGameHallSitDownArgs() *GameHallSitDownArgs {
  return &GameHallSitDownArgs{}
}


func (p *GameHallSitDownArgs) GetAccount() string {
  return p.Account
}

func (p *GameHallSitDownArgs) GetDeskID() int32 {
  return p.DeskID
}

func (p *GameHallSitDownArgs) GetSeat() int32 {
  return p.Seat
}
func (p *GameHallSitDownArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallSitDownArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *GameHallSitDownArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeskID = v
}
  return nil
}

func (p *GameHallSitDownArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Seat = v
}
  return nil
}

func (p *GameHallSitDownArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sitDown_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallSitDownArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *GameHallSitDownArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deskID", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deskID: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deskID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deskID: ", p), err) }
  return err
}

func (p *GameHallSitDownArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seat", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seat: ", p), err) }
  if err := oprot.WriteI32(int32(p.Seat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seat (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seat: ", p), err) }
  return err
}

func (p *GameHallSitDownArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallSitDownArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GameHallSitDownResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGameHallSitDownResult() *GameHallSitDownResult {
  return &GameHallSitDownResult{}
}

var GameHallSitDownResult_Success_DEFAULT bool
func (p *GameHallSitDownResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return GameHallSitDownResult_Success_DEFAULT
  }
return *p.Success
}
func (p *GameHallSitDownResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GameHallSitDownResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallSitDownResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *GameHallSitDownResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sitDown_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallSitDownResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GameHallSitDownResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallSitDownResult(%+v)", *p)
}

// Attributes:
//  - DeskID
//  - SeatID
type GameHallGetSeatInfoArgs struct {
  // unused field # 1
  DeskID int32 `thrift:"deskID,2" db:"deskID" json:"deskID"`
  SeatID int32 `thrift:"seatID,3" db:"seatID" json:"seatID"`
}

func NewGameHallGetSeatInfoArgs() *GameHallGetSeatInfoArgs {
  return &GameHallGetSeatInfoArgs{}
}


func (p *GameHallGetSeatInfoArgs) GetDeskID() int32 {
  return p.DeskID
}

func (p *GameHallGetSeatInfoArgs) GetSeatID() int32 {
  return p.SeatID
}
func (p *GameHallGetSeatInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallGetSeatInfoArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeskID = v
}
  return nil
}

func (p *GameHallGetSeatInfoArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SeatID = v
}
  return nil
}

func (p *GameHallGetSeatInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSeatInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallGetSeatInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deskID", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deskID: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deskID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deskID: ", p), err) }
  return err
}

func (p *GameHallGetSeatInfoArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seatID", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seatID: ", p), err) }
  if err := oprot.WriteI32(int32(p.SeatID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seatID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seatID: ", p), err) }
  return err
}

func (p *GameHallGetSeatInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallGetSeatInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GameHallGetSeatInfoResult struct {
  Success *PlayerInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGameHallGetSeatInfoResult() *GameHallGetSeatInfoResult {
  return &GameHallGetSeatInfoResult{}
}

var GameHallGetSeatInfoResult_Success_DEFAULT *PlayerInfo
func (p *GameHallGetSeatInfoResult) GetSuccess() *PlayerInfo {
  if !p.IsSetSuccess() {
    return GameHallGetSeatInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *GameHallGetSeatInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GameHallGetSeatInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallGetSeatInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PlayerInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GameHallGetSeatInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSeatInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallGetSeatInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GameHallGetSeatInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallGetSeatInfoResult(%+v)", *p)
}

// Attributes:
//  - Account
//  - DeskID
//  - SeatID
//  - IsReady
type GameHallSetReadyArgs struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  DeskID int32 `thrift:"deskID,2" db:"deskID" json:"deskID"`
  SeatID int32 `thrift:"seatID,3" db:"seatID" json:"seatID"`
  IsReady bool `thrift:"isReady,4" db:"isReady" json:"isReady"`
}

func NewGameHallSetReadyArgs() *GameHallSetReadyArgs {
  return &GameHallSetReadyArgs{}
}


func (p *GameHallSetReadyArgs) GetAccount() string {
  return p.Account
}

func (p *GameHallSetReadyArgs) GetDeskID() int32 {
  return p.DeskID
}

func (p *GameHallSetReadyArgs) GetSeatID() int32 {
  return p.SeatID
}

func (p *GameHallSetReadyArgs) GetIsReady() bool {
  return p.IsReady
}
func (p *GameHallSetReadyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallSetReadyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *GameHallSetReadyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeskID = v
}
  return nil
}

func (p *GameHallSetReadyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SeatID = v
}
  return nil
}

func (p *GameHallSetReadyArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsReady = v
}
  return nil
}

func (p *GameHallSetReadyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setReady_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallSetReadyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *GameHallSetReadyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deskID", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deskID: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deskID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deskID: ", p), err) }
  return err
}

func (p *GameHallSetReadyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seatID", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seatID: ", p), err) }
  if err := oprot.WriteI32(int32(p.SeatID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seatID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seatID: ", p), err) }
  return err
}

func (p *GameHallSetReadyArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isReady", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isReady: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsReady)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isReady (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isReady: ", p), err) }
  return err
}

func (p *GameHallSetReadyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallSetReadyArgs(%+v)", *p)
}

type GameHallSetReadyResult struct {
}

func NewGameHallSetReadyResult() *GameHallSetReadyResult {
  return &GameHallSetReadyResult{}
}

func (p *GameHallSetReadyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallSetReadyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setReady_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallSetReadyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallSetReadyResult(%+v)", *p)
}

// Attributes:
//  - Account
//  - DeskID
//  - SeatID
type GameHallLeaveSeatArgs struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  DeskID int32 `thrift:"deskID,2" db:"deskID" json:"deskID"`
  SeatID int32 `thrift:"seatID,3" db:"seatID" json:"seatID"`
}

func NewGameHallLeaveSeatArgs() *GameHallLeaveSeatArgs {
  return &GameHallLeaveSeatArgs{}
}


func (p *GameHallLeaveSeatArgs) GetAccount() string {
  return p.Account
}

func (p *GameHallLeaveSeatArgs) GetDeskID() int32 {
  return p.DeskID
}

func (p *GameHallLeaveSeatArgs) GetSeatID() int32 {
  return p.SeatID
}
func (p *GameHallLeaveSeatArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallLeaveSeatArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *GameHallLeaveSeatArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeskID = v
}
  return nil
}

func (p *GameHallLeaveSeatArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SeatID = v
}
  return nil
}

func (p *GameHallLeaveSeatArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("leaveSeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallLeaveSeatArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *GameHallLeaveSeatArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deskID", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deskID: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deskID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deskID: ", p), err) }
  return err
}

func (p *GameHallLeaveSeatArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seatID", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seatID: ", p), err) }
  if err := oprot.WriteI32(int32(p.SeatID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seatID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seatID: ", p), err) }
  return err
}

func (p *GameHallLeaveSeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallLeaveSeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GameHallLeaveSeatResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGameHallLeaveSeatResult() *GameHallLeaveSeatResult {
  return &GameHallLeaveSeatResult{}
}

var GameHallLeaveSeatResult_Success_DEFAULT int32
func (p *GameHallLeaveSeatResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return GameHallLeaveSeatResult_Success_DEFAULT
  }
return *p.Success
}
func (p *GameHallLeaveSeatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GameHallLeaveSeatResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallLeaveSeatResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *GameHallLeaveSeatResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("leaveSeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallLeaveSeatResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GameHallLeaveSeatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallLeaveSeatResult(%+v)", *p)
}

// Attributes:
//  - Account
type GameHallAutoMatchArgs struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
}

func NewGameHallAutoMatchArgs() *GameHallAutoMatchArgs {
  return &GameHallAutoMatchArgs{}
}


func (p *GameHallAutoMatchArgs) GetAccount() string {
  return p.Account
}
func (p *GameHallAutoMatchArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallAutoMatchArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *GameHallAutoMatchArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("autoMatch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallAutoMatchArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *GameHallAutoMatchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallAutoMatchArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GameHallAutoMatchResult struct {
  Success map[string]int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGameHallAutoMatchResult() *GameHallAutoMatchResult {
  return &GameHallAutoMatchResult{}
}

var GameHallAutoMatchResult_Success_DEFAULT map[string]int32

func (p *GameHallAutoMatchResult) GetSuccess() map[string]int32 {
  return p.Success
}
func (p *GameHallAutoMatchResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GameHallAutoMatchResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallAutoMatchResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int32, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key29 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key29 = v
}
var _val30 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val30 = v
}
    p.Success[_key29] = _val30
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GameHallAutoMatchResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("autoMatch_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallAutoMatchResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GameHallAutoMatchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallAutoMatchResult(%+v)", *p)
}

// Attributes:
//  - ID
type GameHallGetSavedGameArgs struct {
  // unused field # 1
  ID int32 `thrift:"id,2" db:"id" json:"id"`
}

func NewGameHallGetSavedGameArgs() *GameHallGetSavedGameArgs {
  return &GameHallGetSavedGameArgs{}
}


func (p *GameHallGetSavedGameArgs) GetID() int32 {
  return p.ID
}
func (p *GameHallGetSavedGameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallGetSavedGameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *GameHallGetSavedGameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSavedGame_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallGetSavedGameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *GameHallGetSavedGameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallGetSavedGameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GameHallGetSavedGameResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGameHallGetSavedGameResult() *GameHallGetSavedGameResult {
  return &GameHallGetSavedGameResult{}
}

var GameHallGetSavedGameResult_Success_DEFAULT string
func (p *GameHallGetSavedGameResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return GameHallGetSavedGameResult_Success_DEFAULT
  }
return *p.Success
}
func (p *GameHallGetSavedGameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GameHallGetSavedGameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallGetSavedGameResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *GameHallGetSavedGameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSavedGame_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallGetSavedGameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GameHallGetSavedGameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallGetSavedGameResult(%+v)", *p)
}

// Attributes:
//  - Account
type GameHallGetSavedGameListArgs struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
}

func NewGameHallGetSavedGameListArgs() *GameHallGetSavedGameListArgs {
  return &GameHallGetSavedGameListArgs{}
}


func (p *GameHallGetSavedGameListArgs) GetAccount() string {
  return p.Account
}
func (p *GameHallGetSavedGameListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallGetSavedGameListArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *GameHallGetSavedGameListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSavedGameList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallGetSavedGameListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *GameHallGetSavedGameListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallGetSavedGameListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GameHallGetSavedGameListResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGameHallGetSavedGameListResult() *GameHallGetSavedGameListResult {
  return &GameHallGetSavedGameListResult{}
}

var GameHallGetSavedGameListResult_Success_DEFAULT []string

func (p *GameHallGetSavedGameListResult) GetSuccess() []string {
  return p.Success
}
func (p *GameHallGetSavedGameListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GameHallGetSavedGameListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallGetSavedGameListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem31 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem31 = v
}
    p.Success = append(p.Success, _elem31)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GameHallGetSavedGameListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSavedGameList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallGetSavedGameListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GameHallGetSavedGameListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallGetSavedGameListResult(%+v)", *p)
}

type GameHallGetDeskListArgs struct {
}

func NewGameHallGetDeskListArgs() *GameHallGetDeskListArgs {
  return &GameHallGetDeskListArgs{}
}

func (p *GameHallGetDeskListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallGetDeskListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getDeskList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallGetDeskListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallGetDeskListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GameHallGetDeskListResult struct {
  Success []*Desk `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGameHallGetDeskListResult() *GameHallGetDeskListResult {
  return &GameHallGetDeskListResult{}
}

var GameHallGetDeskListResult_Success_DEFAULT []*Desk

func (p *GameHallGetDeskListResult) GetSuccess() []*Desk {
  return p.Success
}
func (p *GameHallGetDeskListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GameHallGetDeskListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameHallGetDeskListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Desk, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem32 := &Desk{}
    if err := _elem32.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
    }
    p.Success = append(p.Success, _elem32)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GameHallGetDeskListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getDeskList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameHallGetDeskListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GameHallGetDeskListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameHallGetDeskListResult(%+v)", *p)
}


type GameOperator interface {
  // Parameters:
  //  - Player1
  //  - Player2
  //  - DeskID
  //  - SeatID
  //  - Row
  //  - Column
  PutChess(ctx context.Context, player1 string, player2 string, deskID int32, seatID int8, row int8, column int8) (r int8, err error)
  // Parameters:
  //  - Account
  //  - OtherSide
  //  - SeatID
  TakeBackReq(ctx context.Context, account string, otherSide string, seatID int8) (r bool, err error)
  // Parameters:
  //  - Player1
  //  - Player2
  //  - SeatID
  //  - Resp
  TakeBackRespond(ctx context.Context, player1 string, player2 string, seatID int8, resp bool) (r bool, err error)
  // Parameters:
  //  - Player1
  //  - Player2
  //  - DeskID
  //  - SeatID
  LoseReq(ctx context.Context, player1 string, player2 string, deskID int32, seatID int8) (err error)
  // Parameters:
  //  - Account
  //  - OtherSide
  //  - SeatID
  DrawReq(ctx context.Context, account string, otherSide string, seatID int8) (err error)
  // Parameters:
  //  - Player1
  //  - Player2
  //  - DeskID
  //  - SeatID
  //  - Resp
  DrawResponse(ctx context.Context, player1 string, player2 string, deskID int32, seatID int8, resp bool) (err error)
  // Parameters:
  //  - ToAccount
  //  - Account
  //  - Text
  SendChatText(ctx context.Context, toAccount string, account string, text string) (err error)
  // Parameters:
  //  - Account
  //  - SeatID
  //  - GameName
  SaveLastGame(ctx context.Context, account string, seatID int8, gameName string) (r int8, err error)
  // Parameters:
  //  - Account
  GetPlayerInfo(ctx context.Context, account string) (r *PlayerInfo, err error)
  // Parameters:
  //  - PlayerInfo
  SavePlayerInfo(ctx context.Context, playerInfo *PlayerInfo) (r bool, err error)
  // Parameters:
  //  - Account
  BlockAccount(ctx context.Context, account string) (err error)
}

type GameOperatorClient struct {
  c thrift.TClient
}

func NewGameOperatorClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *GameOperatorClient {
  return &GameOperatorClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewGameOperatorClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *GameOperatorClient {
  return &GameOperatorClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewGameOperatorClient(c thrift.TClient) *GameOperatorClient {
  return &GameOperatorClient{
    c: c,
  }
}

func (p *GameOperatorClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Player1
//  - Player2
//  - DeskID
//  - SeatID
//  - Row
//  - Column
func (p *GameOperatorClient) PutChess(ctx context.Context, player1 string, player2 string, deskID int32, seatID int8, row int8, column int8) (r int8, err error) {
  var _args48 GameOperatorPutChessArgs
  _args48.Player1 = player1
  _args48.Player2 = player2
  _args48.DeskID = deskID
  _args48.SeatID = seatID
  _args48.Row = row
  _args48.Column = column
  var _result49 GameOperatorPutChessResult
  if err = p.Client_().Call(ctx, "putChess", &_args48, &_result49); err != nil {
    return
  }
  switch {
  case _result49.E!= nil:
    return r, _result49.E
  }

  return _result49.GetSuccess(), nil
}

// Parameters:
//  - Account
//  - OtherSide
//  - SeatID
func (p *GameOperatorClient) TakeBackReq(ctx context.Context, account string, otherSide string, seatID int8) (r bool, err error) {
  var _args50 GameOperatorTakeBackReqArgs
  _args50.Account = account
  _args50.OtherSide = otherSide
  _args50.SeatID = seatID
  var _result51 GameOperatorTakeBackReqResult
  if err = p.Client_().Call(ctx, "takeBackReq", &_args50, &_result51); err != nil {
    return
  }
  return _result51.GetSuccess(), nil
}

// Parameters:
//  - Player1
//  - Player2
//  - SeatID
//  - Resp
func (p *GameOperatorClient) TakeBackRespond(ctx context.Context, player1 string, player2 string, seatID int8, resp bool) (r bool, err error) {
  var _args52 GameOperatorTakeBackRespondArgs
  _args52.Player1 = player1
  _args52.Player2 = player2
  _args52.SeatID = seatID
  _args52.Resp = resp
  var _result53 GameOperatorTakeBackRespondResult
  if err = p.Client_().Call(ctx, "takeBackRespond", &_args52, &_result53); err != nil {
    return
  }
  return _result53.GetSuccess(), nil
}

// Parameters:
//  - Player1
//  - Player2
//  - DeskID
//  - SeatID
func (p *GameOperatorClient) LoseReq(ctx context.Context, player1 string, player2 string, deskID int32, seatID int8) (err error) {
  var _args54 GameOperatorLoseReqArgs
  _args54.Player1 = player1
  _args54.Player2 = player2
  _args54.DeskID = deskID
  _args54.SeatID = seatID
  var _result55 GameOperatorLoseReqResult
  if err = p.Client_().Call(ctx, "loseReq", &_args54, &_result55); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Account
//  - OtherSide
//  - SeatID
func (p *GameOperatorClient) DrawReq(ctx context.Context, account string, otherSide string, seatID int8) (err error) {
  var _args56 GameOperatorDrawReqArgs
  _args56.Account = account
  _args56.OtherSide = otherSide
  _args56.SeatID = seatID
  var _result57 GameOperatorDrawReqResult
  if err = p.Client_().Call(ctx, "drawReq", &_args56, &_result57); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Player1
//  - Player2
//  - DeskID
//  - SeatID
//  - Resp
func (p *GameOperatorClient) DrawResponse(ctx context.Context, player1 string, player2 string, deskID int32, seatID int8, resp bool) (err error) {
  var _args58 GameOperatorDrawResponseArgs
  _args58.Player1 = player1
  _args58.Player2 = player2
  _args58.DeskID = deskID
  _args58.SeatID = seatID
  _args58.Resp = resp
  var _result59 GameOperatorDrawResponseResult
  if err = p.Client_().Call(ctx, "drawResponse", &_args58, &_result59); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - ToAccount
//  - Account
//  - Text
func (p *GameOperatorClient) SendChatText(ctx context.Context, toAccount string, account string, text string) (err error) {
  var _args60 GameOperatorSendChatTextArgs
  _args60.ToAccount = toAccount
  _args60.Account = account
  _args60.Text = text
  var _result61 GameOperatorSendChatTextResult
  if err = p.Client_().Call(ctx, "sendChatText", &_args60, &_result61); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Account
//  - SeatID
//  - GameName
func (p *GameOperatorClient) SaveLastGame(ctx context.Context, account string, seatID int8, gameName string) (r int8, err error) {
  var _args62 GameOperatorSaveLastGameArgs
  _args62.Account = account
  _args62.SeatID = seatID
  _args62.GameName = gameName
  var _result63 GameOperatorSaveLastGameResult
  if err = p.Client_().Call(ctx, "saveLastGame", &_args62, &_result63); err != nil {
    return
  }
  return _result63.GetSuccess(), nil
}

// Parameters:
//  - Account
func (p *GameOperatorClient) GetPlayerInfo(ctx context.Context, account string) (r *PlayerInfo, err error) {
  var _args64 GameOperatorGetPlayerInfoArgs
  _args64.Account = account
  var _result65 GameOperatorGetPlayerInfoResult
  if err = p.Client_().Call(ctx, "getPlayerInfo", &_args64, &_result65); err != nil {
    return
  }
  return _result65.GetSuccess(), nil
}

// Parameters:
//  - PlayerInfo
func (p *GameOperatorClient) SavePlayerInfo(ctx context.Context, playerInfo *PlayerInfo) (r bool, err error) {
  var _args66 GameOperatorSavePlayerInfoArgs
  _args66.PlayerInfo = playerInfo
  var _result67 GameOperatorSavePlayerInfoResult
  if err = p.Client_().Call(ctx, "savePlayerInfo", &_args66, &_result67); err != nil {
    return
  }
  return _result67.GetSuccess(), nil
}

// Parameters:
//  - Account
func (p *GameOperatorClient) BlockAccount(ctx context.Context, account string) (err error) {
  var _args68 GameOperatorBlockAccountArgs
  _args68.Account = account
  var _result69 GameOperatorBlockAccountResult
  if err = p.Client_().Call(ctx, "blockAccount", &_args68, &_result69); err != nil {
    return
  }
  return nil
}

type GameOperatorProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler GameOperator
}

func (p *GameOperatorProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *GameOperatorProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *GameOperatorProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewGameOperatorProcessor(handler GameOperator) *GameOperatorProcessor {

  self70 := &GameOperatorProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self70.processorMap["putChess"] = &gameOperatorProcessorPutChess{handler:handler}
  self70.processorMap["takeBackReq"] = &gameOperatorProcessorTakeBackReq{handler:handler}
  self70.processorMap["takeBackRespond"] = &gameOperatorProcessorTakeBackRespond{handler:handler}
  self70.processorMap["loseReq"] = &gameOperatorProcessorLoseReq{handler:handler}
  self70.processorMap["drawReq"] = &gameOperatorProcessorDrawReq{handler:handler}
  self70.processorMap["drawResponse"] = &gameOperatorProcessorDrawResponse{handler:handler}
  self70.processorMap["sendChatText"] = &gameOperatorProcessorSendChatText{handler:handler}
  self70.processorMap["saveLastGame"] = &gameOperatorProcessorSaveLastGame{handler:handler}
  self70.processorMap["getPlayerInfo"] = &gameOperatorProcessorGetPlayerInfo{handler:handler}
  self70.processorMap["savePlayerInfo"] = &gameOperatorProcessorSavePlayerInfo{handler:handler}
  self70.processorMap["blockAccount"] = &gameOperatorProcessorBlockAccount{handler:handler}
return self70
}

func (p *GameOperatorProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x71 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x71.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x71

}

type gameOperatorProcessorPutChess struct {
  handler GameOperator
}

func (p *gameOperatorProcessorPutChess) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameOperatorPutChessArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putChess", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameOperatorPutChessResult{}
var retval int8
  var err2 error
  if retval, err2 = p.handler.PutChess(ctx, args.Player1, args.Player2, args.DeskID, args.SeatID, args.Row, args.Column); err2 != nil {
  switch v := err2.(type) {
    case *InvalidOperation:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putChess: " + err2.Error())
    oprot.WriteMessageBegin("putChess", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("putChess", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameOperatorProcessorTakeBackReq struct {
  handler GameOperator
}

func (p *gameOperatorProcessorTakeBackReq) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameOperatorTakeBackReqArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("takeBackReq", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameOperatorTakeBackReqResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.TakeBackReq(ctx, args.Account, args.OtherSide, args.SeatID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing takeBackReq: " + err2.Error())
    oprot.WriteMessageBegin("takeBackReq", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("takeBackReq", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameOperatorProcessorTakeBackRespond struct {
  handler GameOperator
}

func (p *gameOperatorProcessorTakeBackRespond) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameOperatorTakeBackRespondArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("takeBackRespond", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameOperatorTakeBackRespondResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.TakeBackRespond(ctx, args.Player1, args.Player2, args.SeatID, args.Resp); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing takeBackRespond: " + err2.Error())
    oprot.WriteMessageBegin("takeBackRespond", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("takeBackRespond", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameOperatorProcessorLoseReq struct {
  handler GameOperator
}

func (p *gameOperatorProcessorLoseReq) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameOperatorLoseReqArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("loseReq", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameOperatorLoseReqResult{}
  var err2 error
  if err2 = p.handler.LoseReq(ctx, args.Player1, args.Player2, args.DeskID, args.SeatID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loseReq: " + err2.Error())
    oprot.WriteMessageBegin("loseReq", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("loseReq", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameOperatorProcessorDrawReq struct {
  handler GameOperator
}

func (p *gameOperatorProcessorDrawReq) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameOperatorDrawReqArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drawReq", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameOperatorDrawReqResult{}
  var err2 error
  if err2 = p.handler.DrawReq(ctx, args.Account, args.OtherSide, args.SeatID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drawReq: " + err2.Error())
    oprot.WriteMessageBegin("drawReq", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("drawReq", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameOperatorProcessorDrawResponse struct {
  handler GameOperator
}

func (p *gameOperatorProcessorDrawResponse) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameOperatorDrawResponseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drawResponse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameOperatorDrawResponseResult{}
  var err2 error
  if err2 = p.handler.DrawResponse(ctx, args.Player1, args.Player2, args.DeskID, args.SeatID, args.Resp); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drawResponse: " + err2.Error())
    oprot.WriteMessageBegin("drawResponse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("drawResponse", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameOperatorProcessorSendChatText struct {
  handler GameOperator
}

func (p *gameOperatorProcessorSendChatText) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameOperatorSendChatTextArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendChatText", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameOperatorSendChatTextResult{}
  var err2 error
  if err2 = p.handler.SendChatText(ctx, args.ToAccount, args.Account, args.Text); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatText: " + err2.Error())
    oprot.WriteMessageBegin("sendChatText", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("sendChatText", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameOperatorProcessorSaveLastGame struct {
  handler GameOperator
}

func (p *gameOperatorProcessorSaveLastGame) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameOperatorSaveLastGameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("saveLastGame", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameOperatorSaveLastGameResult{}
var retval int8
  var err2 error
  if retval, err2 = p.handler.SaveLastGame(ctx, args.Account, args.SeatID, args.GameName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing saveLastGame: " + err2.Error())
    oprot.WriteMessageBegin("saveLastGame", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("saveLastGame", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameOperatorProcessorGetPlayerInfo struct {
  handler GameOperator
}

func (p *gameOperatorProcessorGetPlayerInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameOperatorGetPlayerInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getPlayerInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameOperatorGetPlayerInfoResult{}
var retval *PlayerInfo
  var err2 error
  if retval, err2 = p.handler.GetPlayerInfo(ctx, args.Account); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPlayerInfo: " + err2.Error())
    oprot.WriteMessageBegin("getPlayerInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getPlayerInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameOperatorProcessorSavePlayerInfo struct {
  handler GameOperator
}

func (p *gameOperatorProcessorSavePlayerInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameOperatorSavePlayerInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("savePlayerInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameOperatorSavePlayerInfoResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SavePlayerInfo(ctx, args.PlayerInfo); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing savePlayerInfo: " + err2.Error())
    oprot.WriteMessageBegin("savePlayerInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("savePlayerInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type gameOperatorProcessorBlockAccount struct {
  handler GameOperator
}

func (p *gameOperatorProcessorBlockAccount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GameOperatorBlockAccountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("blockAccount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GameOperatorBlockAccountResult{}
  var err2 error
  if err2 = p.handler.BlockAccount(ctx, args.Account); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockAccount: " + err2.Error())
    oprot.WriteMessageBegin("blockAccount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("blockAccount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Player1
//  - Player2
//  - DeskID
//  - SeatID
//  - Row
//  - Column
type GameOperatorPutChessArgs struct {
  Player1 string `thrift:"player1,1" db:"player1" json:"player1"`
  Player2 string `thrift:"player2,2" db:"player2" json:"player2"`
  DeskID int32 `thrift:"deskID,3" db:"deskID" json:"deskID"`
  SeatID int8 `thrift:"seatID,4" db:"seatID" json:"seatID"`
  Row int8 `thrift:"row,5" db:"row" json:"row"`
  Column int8 `thrift:"column,6" db:"column" json:"column"`
}

func NewGameOperatorPutChessArgs() *GameOperatorPutChessArgs {
  return &GameOperatorPutChessArgs{}
}


func (p *GameOperatorPutChessArgs) GetPlayer1() string {
  return p.Player1
}

func (p *GameOperatorPutChessArgs) GetPlayer2() string {
  return p.Player2
}

func (p *GameOperatorPutChessArgs) GetDeskID() int32 {
  return p.DeskID
}

func (p *GameOperatorPutChessArgs) GetSeatID() int8 {
  return p.SeatID
}

func (p *GameOperatorPutChessArgs) GetRow() int8 {
  return p.Row
}

func (p *GameOperatorPutChessArgs) GetColumn() int8 {
  return p.Column
}
func (p *GameOperatorPutChessArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorPutChessArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Player1 = v
}
  return nil
}

func (p *GameOperatorPutChessArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Player2 = v
}
  return nil
}

func (p *GameOperatorPutChessArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DeskID = v
}
  return nil
}

func (p *GameOperatorPutChessArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := int8(v)
  p.SeatID = temp
}
  return nil
}

func (p *GameOperatorPutChessArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := int8(v)
  p.Row = temp
}
  return nil
}

func (p *GameOperatorPutChessArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := int8(v)
  p.Column = temp
}
  return nil
}

func (p *GameOperatorPutChessArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putChess_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorPutChessArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("player1", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:player1: ", p), err) }
  if err := oprot.WriteString(string(p.Player1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.player1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:player1: ", p), err) }
  return err
}

func (p *GameOperatorPutChessArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("player2", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:player2: ", p), err) }
  if err := oprot.WriteString(string(p.Player2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.player2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:player2: ", p), err) }
  return err
}

func (p *GameOperatorPutChessArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deskID", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deskID: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deskID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deskID: ", p), err) }
  return err
}

func (p *GameOperatorPutChessArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seatID", thrift.BYTE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:seatID: ", p), err) }
  if err := oprot.WriteByte(int8(p.SeatID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seatID (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:seatID: ", p), err) }
  return err
}

func (p *GameOperatorPutChessArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row", thrift.BYTE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:row: ", p), err) }
  if err := oprot.WriteByte(int8(p.Row)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:row: ", p), err) }
  return err
}

func (p *GameOperatorPutChessArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column", thrift.BYTE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:column: ", p), err) }
  if err := oprot.WriteByte(int8(p.Column)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:column: ", p), err) }
  return err
}

func (p *GameOperatorPutChessArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorPutChessArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type GameOperatorPutChessResult struct {
  Success *int8 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *InvalidOperation `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewGameOperatorPutChessResult() *GameOperatorPutChessResult {
  return &GameOperatorPutChessResult{}
}

var GameOperatorPutChessResult_Success_DEFAULT int8
func (p *GameOperatorPutChessResult) GetSuccess() int8 {
  if !p.IsSetSuccess() {
    return GameOperatorPutChessResult_Success_DEFAULT
  }
return *p.Success
}
var GameOperatorPutChessResult_E_DEFAULT *InvalidOperation
func (p *GameOperatorPutChessResult) GetE() *InvalidOperation {
  if !p.IsSetE() {
    return GameOperatorPutChessResult_E_DEFAULT
  }
return p.E
}
func (p *GameOperatorPutChessResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GameOperatorPutChessResult) IsSetE() bool {
  return p.E != nil
}

func (p *GameOperatorPutChessResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorPutChessResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := int8(v)
  p.Success = &temp
}
  return nil
}

func (p *GameOperatorPutChessResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &InvalidOperation{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *GameOperatorPutChessResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putChess_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorPutChessResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BYTE, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteByte(int8(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GameOperatorPutChessResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *GameOperatorPutChessResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorPutChessResult(%+v)", *p)
}

// Attributes:
//  - Account
//  - OtherSide
//  - SeatID
type GameOperatorTakeBackReqArgs struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  OtherSide string `thrift:"otherSide,2" db:"otherSide" json:"otherSide"`
  SeatID int8 `thrift:"seatID,3" db:"seatID" json:"seatID"`
}

func NewGameOperatorTakeBackReqArgs() *GameOperatorTakeBackReqArgs {
  return &GameOperatorTakeBackReqArgs{}
}


func (p *GameOperatorTakeBackReqArgs) GetAccount() string {
  return p.Account
}

func (p *GameOperatorTakeBackReqArgs) GetOtherSide() string {
  return p.OtherSide
}

func (p *GameOperatorTakeBackReqArgs) GetSeatID() int8 {
  return p.SeatID
}
func (p *GameOperatorTakeBackReqArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorTakeBackReqArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *GameOperatorTakeBackReqArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OtherSide = v
}
  return nil
}

func (p *GameOperatorTakeBackReqArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.SeatID = temp
}
  return nil
}

func (p *GameOperatorTakeBackReqArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("takeBackReq_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorTakeBackReqArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *GameOperatorTakeBackReqArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("otherSide", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:otherSide: ", p), err) }
  if err := oprot.WriteString(string(p.OtherSide)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.otherSide (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:otherSide: ", p), err) }
  return err
}

func (p *GameOperatorTakeBackReqArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seatID", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seatID: ", p), err) }
  if err := oprot.WriteByte(int8(p.SeatID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seatID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seatID: ", p), err) }
  return err
}

func (p *GameOperatorTakeBackReqArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorTakeBackReqArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GameOperatorTakeBackReqResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGameOperatorTakeBackReqResult() *GameOperatorTakeBackReqResult {
  return &GameOperatorTakeBackReqResult{}
}

var GameOperatorTakeBackReqResult_Success_DEFAULT bool
func (p *GameOperatorTakeBackReqResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return GameOperatorTakeBackReqResult_Success_DEFAULT
  }
return *p.Success
}
func (p *GameOperatorTakeBackReqResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GameOperatorTakeBackReqResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorTakeBackReqResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *GameOperatorTakeBackReqResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("takeBackReq_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorTakeBackReqResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GameOperatorTakeBackReqResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorTakeBackReqResult(%+v)", *p)
}

// Attributes:
//  - Player1
//  - Player2
//  - SeatID
//  - Resp
type GameOperatorTakeBackRespondArgs struct {
  Player1 string `thrift:"player1,1" db:"player1" json:"player1"`
  Player2 string `thrift:"player2,2" db:"player2" json:"player2"`
  SeatID int8 `thrift:"seatID,3" db:"seatID" json:"seatID"`
  Resp bool `thrift:"resp,4" db:"resp" json:"resp"`
}

func NewGameOperatorTakeBackRespondArgs() *GameOperatorTakeBackRespondArgs {
  return &GameOperatorTakeBackRespondArgs{}
}


func (p *GameOperatorTakeBackRespondArgs) GetPlayer1() string {
  return p.Player1
}

func (p *GameOperatorTakeBackRespondArgs) GetPlayer2() string {
  return p.Player2
}

func (p *GameOperatorTakeBackRespondArgs) GetSeatID() int8 {
  return p.SeatID
}

func (p *GameOperatorTakeBackRespondArgs) GetResp() bool {
  return p.Resp
}
func (p *GameOperatorTakeBackRespondArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorTakeBackRespondArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Player1 = v
}
  return nil
}

func (p *GameOperatorTakeBackRespondArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Player2 = v
}
  return nil
}

func (p *GameOperatorTakeBackRespondArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.SeatID = temp
}
  return nil
}

func (p *GameOperatorTakeBackRespondArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Resp = v
}
  return nil
}

func (p *GameOperatorTakeBackRespondArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("takeBackRespond_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorTakeBackRespondArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("player1", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:player1: ", p), err) }
  if err := oprot.WriteString(string(p.Player1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.player1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:player1: ", p), err) }
  return err
}

func (p *GameOperatorTakeBackRespondArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("player2", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:player2: ", p), err) }
  if err := oprot.WriteString(string(p.Player2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.player2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:player2: ", p), err) }
  return err
}

func (p *GameOperatorTakeBackRespondArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seatID", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seatID: ", p), err) }
  if err := oprot.WriteByte(int8(p.SeatID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seatID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seatID: ", p), err) }
  return err
}

func (p *GameOperatorTakeBackRespondArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resp", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:resp: ", p), err) }
  if err := oprot.WriteBool(bool(p.Resp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resp (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:resp: ", p), err) }
  return err
}

func (p *GameOperatorTakeBackRespondArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorTakeBackRespondArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GameOperatorTakeBackRespondResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGameOperatorTakeBackRespondResult() *GameOperatorTakeBackRespondResult {
  return &GameOperatorTakeBackRespondResult{}
}

var GameOperatorTakeBackRespondResult_Success_DEFAULT bool
func (p *GameOperatorTakeBackRespondResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return GameOperatorTakeBackRespondResult_Success_DEFAULT
  }
return *p.Success
}
func (p *GameOperatorTakeBackRespondResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GameOperatorTakeBackRespondResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorTakeBackRespondResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *GameOperatorTakeBackRespondResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("takeBackRespond_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorTakeBackRespondResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GameOperatorTakeBackRespondResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorTakeBackRespondResult(%+v)", *p)
}

// Attributes:
//  - Player1
//  - Player2
//  - DeskID
//  - SeatID
type GameOperatorLoseReqArgs struct {
  Player1 string `thrift:"player1,1" db:"player1" json:"player1"`
  Player2 string `thrift:"player2,2" db:"player2" json:"player2"`
  DeskID int32 `thrift:"deskID,3" db:"deskID" json:"deskID"`
  SeatID int8 `thrift:"seatID,4" db:"seatID" json:"seatID"`
}

func NewGameOperatorLoseReqArgs() *GameOperatorLoseReqArgs {
  return &GameOperatorLoseReqArgs{}
}


func (p *GameOperatorLoseReqArgs) GetPlayer1() string {
  return p.Player1
}

func (p *GameOperatorLoseReqArgs) GetPlayer2() string {
  return p.Player2
}

func (p *GameOperatorLoseReqArgs) GetDeskID() int32 {
  return p.DeskID
}

func (p *GameOperatorLoseReqArgs) GetSeatID() int8 {
  return p.SeatID
}
func (p *GameOperatorLoseReqArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorLoseReqArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Player1 = v
}
  return nil
}

func (p *GameOperatorLoseReqArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Player2 = v
}
  return nil
}

func (p *GameOperatorLoseReqArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DeskID = v
}
  return nil
}

func (p *GameOperatorLoseReqArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := int8(v)
  p.SeatID = temp
}
  return nil
}

func (p *GameOperatorLoseReqArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("loseReq_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorLoseReqArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("player1", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:player1: ", p), err) }
  if err := oprot.WriteString(string(p.Player1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.player1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:player1: ", p), err) }
  return err
}

func (p *GameOperatorLoseReqArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("player2", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:player2: ", p), err) }
  if err := oprot.WriteString(string(p.Player2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.player2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:player2: ", p), err) }
  return err
}

func (p *GameOperatorLoseReqArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deskID", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deskID: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deskID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deskID: ", p), err) }
  return err
}

func (p *GameOperatorLoseReqArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seatID", thrift.BYTE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:seatID: ", p), err) }
  if err := oprot.WriteByte(int8(p.SeatID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seatID (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:seatID: ", p), err) }
  return err
}

func (p *GameOperatorLoseReqArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorLoseReqArgs(%+v)", *p)
}

type GameOperatorLoseReqResult struct {
}

func NewGameOperatorLoseReqResult() *GameOperatorLoseReqResult {
  return &GameOperatorLoseReqResult{}
}

func (p *GameOperatorLoseReqResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorLoseReqResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("loseReq_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorLoseReqResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorLoseReqResult(%+v)", *p)
}

// Attributes:
//  - Account
//  - OtherSide
//  - SeatID
type GameOperatorDrawReqArgs struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  OtherSide string `thrift:"otherSide,2" db:"otherSide" json:"otherSide"`
  SeatID int8 `thrift:"seatID,3" db:"seatID" json:"seatID"`
}

func NewGameOperatorDrawReqArgs() *GameOperatorDrawReqArgs {
  return &GameOperatorDrawReqArgs{}
}


func (p *GameOperatorDrawReqArgs) GetAccount() string {
  return p.Account
}

func (p *GameOperatorDrawReqArgs) GetOtherSide() string {
  return p.OtherSide
}

func (p *GameOperatorDrawReqArgs) GetSeatID() int8 {
  return p.SeatID
}
func (p *GameOperatorDrawReqArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorDrawReqArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *GameOperatorDrawReqArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OtherSide = v
}
  return nil
}

func (p *GameOperatorDrawReqArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.SeatID = temp
}
  return nil
}

func (p *GameOperatorDrawReqArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drawReq_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorDrawReqArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *GameOperatorDrawReqArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("otherSide", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:otherSide: ", p), err) }
  if err := oprot.WriteString(string(p.OtherSide)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.otherSide (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:otherSide: ", p), err) }
  return err
}

func (p *GameOperatorDrawReqArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seatID", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seatID: ", p), err) }
  if err := oprot.WriteByte(int8(p.SeatID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seatID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seatID: ", p), err) }
  return err
}

func (p *GameOperatorDrawReqArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorDrawReqArgs(%+v)", *p)
}

type GameOperatorDrawReqResult struct {
}

func NewGameOperatorDrawReqResult() *GameOperatorDrawReqResult {
  return &GameOperatorDrawReqResult{}
}

func (p *GameOperatorDrawReqResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorDrawReqResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drawReq_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorDrawReqResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorDrawReqResult(%+v)", *p)
}

// Attributes:
//  - Player1
//  - Player2
//  - DeskID
//  - SeatID
//  - Resp
type GameOperatorDrawResponseArgs struct {
  Player1 string `thrift:"player1,1" db:"player1" json:"player1"`
  Player2 string `thrift:"player2,2" db:"player2" json:"player2"`
  DeskID int32 `thrift:"deskID,3" db:"deskID" json:"deskID"`
  SeatID int8 `thrift:"seatID,4" db:"seatID" json:"seatID"`
  Resp bool `thrift:"resp,5" db:"resp" json:"resp"`
}

func NewGameOperatorDrawResponseArgs() *GameOperatorDrawResponseArgs {
  return &GameOperatorDrawResponseArgs{}
}


func (p *GameOperatorDrawResponseArgs) GetPlayer1() string {
  return p.Player1
}

func (p *GameOperatorDrawResponseArgs) GetPlayer2() string {
  return p.Player2
}

func (p *GameOperatorDrawResponseArgs) GetDeskID() int32 {
  return p.DeskID
}

func (p *GameOperatorDrawResponseArgs) GetSeatID() int8 {
  return p.SeatID
}

func (p *GameOperatorDrawResponseArgs) GetResp() bool {
  return p.Resp
}
func (p *GameOperatorDrawResponseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorDrawResponseArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Player1 = v
}
  return nil
}

func (p *GameOperatorDrawResponseArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Player2 = v
}
  return nil
}

func (p *GameOperatorDrawResponseArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DeskID = v
}
  return nil
}

func (p *GameOperatorDrawResponseArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := int8(v)
  p.SeatID = temp
}
  return nil
}

func (p *GameOperatorDrawResponseArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Resp = v
}
  return nil
}

func (p *GameOperatorDrawResponseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drawResponse_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorDrawResponseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("player1", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:player1: ", p), err) }
  if err := oprot.WriteString(string(p.Player1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.player1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:player1: ", p), err) }
  return err
}

func (p *GameOperatorDrawResponseArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("player2", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:player2: ", p), err) }
  if err := oprot.WriteString(string(p.Player2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.player2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:player2: ", p), err) }
  return err
}

func (p *GameOperatorDrawResponseArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deskID", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deskID: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deskID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deskID: ", p), err) }
  return err
}

func (p *GameOperatorDrawResponseArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seatID", thrift.BYTE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:seatID: ", p), err) }
  if err := oprot.WriteByte(int8(p.SeatID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seatID (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:seatID: ", p), err) }
  return err
}

func (p *GameOperatorDrawResponseArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resp", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:resp: ", p), err) }
  if err := oprot.WriteBool(bool(p.Resp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resp (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:resp: ", p), err) }
  return err
}

func (p *GameOperatorDrawResponseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorDrawResponseArgs(%+v)", *p)
}

type GameOperatorDrawResponseResult struct {
}

func NewGameOperatorDrawResponseResult() *GameOperatorDrawResponseResult {
  return &GameOperatorDrawResponseResult{}
}

func (p *GameOperatorDrawResponseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorDrawResponseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drawResponse_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorDrawResponseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorDrawResponseResult(%+v)", *p)
}

// Attributes:
//  - ToAccount
//  - Account
//  - Text
type GameOperatorSendChatTextArgs struct {
  ToAccount string `thrift:"toAccount,1" db:"toAccount" json:"toAccount"`
  Account string `thrift:"account,2" db:"account" json:"account"`
  Text string `thrift:"text,3" db:"text" json:"text"`
}

func NewGameOperatorSendChatTextArgs() *GameOperatorSendChatTextArgs {
  return &GameOperatorSendChatTextArgs{}
}


func (p *GameOperatorSendChatTextArgs) GetToAccount() string {
  return p.ToAccount
}

func (p *GameOperatorSendChatTextArgs) GetAccount() string {
  return p.Account
}

func (p *GameOperatorSendChatTextArgs) GetText() string {
  return p.Text
}
func (p *GameOperatorSendChatTextArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorSendChatTextArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ToAccount = v
}
  return nil
}

func (p *GameOperatorSendChatTextArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *GameOperatorSendChatTextArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *GameOperatorSendChatTextArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendChatText_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorSendChatTextArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("toAccount", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:toAccount: ", p), err) }
  if err := oprot.WriteString(string(p.ToAccount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toAccount (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:toAccount: ", p), err) }
  return err
}

func (p *GameOperatorSendChatTextArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:account: ", p), err) }
  return err
}

func (p *GameOperatorSendChatTextArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:text: ", p), err) }
  return err
}

func (p *GameOperatorSendChatTextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorSendChatTextArgs(%+v)", *p)
}

type GameOperatorSendChatTextResult struct {
}

func NewGameOperatorSendChatTextResult() *GameOperatorSendChatTextResult {
  return &GameOperatorSendChatTextResult{}
}

func (p *GameOperatorSendChatTextResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorSendChatTextResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendChatText_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorSendChatTextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorSendChatTextResult(%+v)", *p)
}

// Attributes:
//  - Account
//  - SeatID
//  - GameName
type GameOperatorSaveLastGameArgs struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  // unused field # 2
  SeatID int8 `thrift:"seatID,3" db:"seatID" json:"seatID"`
  GameName string `thrift:"gameName,4" db:"gameName" json:"gameName"`
}

func NewGameOperatorSaveLastGameArgs() *GameOperatorSaveLastGameArgs {
  return &GameOperatorSaveLastGameArgs{}
}


func (p *GameOperatorSaveLastGameArgs) GetAccount() string {
  return p.Account
}

func (p *GameOperatorSaveLastGameArgs) GetSeatID() int8 {
  return p.SeatID
}

func (p *GameOperatorSaveLastGameArgs) GetGameName() string {
  return p.GameName
}
func (p *GameOperatorSaveLastGameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorSaveLastGameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *GameOperatorSaveLastGameArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.SeatID = temp
}
  return nil
}

func (p *GameOperatorSaveLastGameArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GameName = v
}
  return nil
}

func (p *GameOperatorSaveLastGameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("saveLastGame_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorSaveLastGameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *GameOperatorSaveLastGameArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seatID", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seatID: ", p), err) }
  if err := oprot.WriteByte(int8(p.SeatID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seatID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seatID: ", p), err) }
  return err
}

func (p *GameOperatorSaveLastGameArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gameName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gameName: ", p), err) }
  if err := oprot.WriteString(string(p.GameName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gameName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gameName: ", p), err) }
  return err
}

func (p *GameOperatorSaveLastGameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorSaveLastGameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GameOperatorSaveLastGameResult struct {
  Success *int8 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGameOperatorSaveLastGameResult() *GameOperatorSaveLastGameResult {
  return &GameOperatorSaveLastGameResult{}
}

var GameOperatorSaveLastGameResult_Success_DEFAULT int8
func (p *GameOperatorSaveLastGameResult) GetSuccess() int8 {
  if !p.IsSetSuccess() {
    return GameOperatorSaveLastGameResult_Success_DEFAULT
  }
return *p.Success
}
func (p *GameOperatorSaveLastGameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GameOperatorSaveLastGameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorSaveLastGameResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := int8(v)
  p.Success = &temp
}
  return nil
}

func (p *GameOperatorSaveLastGameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("saveLastGame_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorSaveLastGameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BYTE, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteByte(int8(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GameOperatorSaveLastGameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorSaveLastGameResult(%+v)", *p)
}

// Attributes:
//  - Account
type GameOperatorGetPlayerInfoArgs struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
}

func NewGameOperatorGetPlayerInfoArgs() *GameOperatorGetPlayerInfoArgs {
  return &GameOperatorGetPlayerInfoArgs{}
}


func (p *GameOperatorGetPlayerInfoArgs) GetAccount() string {
  return p.Account
}
func (p *GameOperatorGetPlayerInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorGetPlayerInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *GameOperatorGetPlayerInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getPlayerInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorGetPlayerInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *GameOperatorGetPlayerInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorGetPlayerInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GameOperatorGetPlayerInfoResult struct {
  Success *PlayerInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGameOperatorGetPlayerInfoResult() *GameOperatorGetPlayerInfoResult {
  return &GameOperatorGetPlayerInfoResult{}
}

var GameOperatorGetPlayerInfoResult_Success_DEFAULT *PlayerInfo
func (p *GameOperatorGetPlayerInfoResult) GetSuccess() *PlayerInfo {
  if !p.IsSetSuccess() {
    return GameOperatorGetPlayerInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *GameOperatorGetPlayerInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GameOperatorGetPlayerInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorGetPlayerInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PlayerInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GameOperatorGetPlayerInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getPlayerInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorGetPlayerInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GameOperatorGetPlayerInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorGetPlayerInfoResult(%+v)", *p)
}

// Attributes:
//  - PlayerInfo
type GameOperatorSavePlayerInfoArgs struct {
  PlayerInfo *PlayerInfo `thrift:"playerInfo,1" db:"playerInfo" json:"playerInfo"`
}

func NewGameOperatorSavePlayerInfoArgs() *GameOperatorSavePlayerInfoArgs {
  return &GameOperatorSavePlayerInfoArgs{}
}

var GameOperatorSavePlayerInfoArgs_PlayerInfo_DEFAULT *PlayerInfo
func (p *GameOperatorSavePlayerInfoArgs) GetPlayerInfo() *PlayerInfo {
  if !p.IsSetPlayerInfo() {
    return GameOperatorSavePlayerInfoArgs_PlayerInfo_DEFAULT
  }
return p.PlayerInfo
}
func (p *GameOperatorSavePlayerInfoArgs) IsSetPlayerInfo() bool {
  return p.PlayerInfo != nil
}

func (p *GameOperatorSavePlayerInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorSavePlayerInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.PlayerInfo = &PlayerInfo{}
  if err := p.PlayerInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PlayerInfo), err)
  }
  return nil
}

func (p *GameOperatorSavePlayerInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("savePlayerInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorSavePlayerInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("playerInfo", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:playerInfo: ", p), err) }
  if err := p.PlayerInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PlayerInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:playerInfo: ", p), err) }
  return err
}

func (p *GameOperatorSavePlayerInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorSavePlayerInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GameOperatorSavePlayerInfoResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGameOperatorSavePlayerInfoResult() *GameOperatorSavePlayerInfoResult {
  return &GameOperatorSavePlayerInfoResult{}
}

var GameOperatorSavePlayerInfoResult_Success_DEFAULT bool
func (p *GameOperatorSavePlayerInfoResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return GameOperatorSavePlayerInfoResult_Success_DEFAULT
  }
return *p.Success
}
func (p *GameOperatorSavePlayerInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GameOperatorSavePlayerInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorSavePlayerInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *GameOperatorSavePlayerInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("savePlayerInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorSavePlayerInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GameOperatorSavePlayerInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorSavePlayerInfoResult(%+v)", *p)
}

// Attributes:
//  - Account
type GameOperatorBlockAccountArgs struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
}

func NewGameOperatorBlockAccountArgs() *GameOperatorBlockAccountArgs {
  return &GameOperatorBlockAccountArgs{}
}


func (p *GameOperatorBlockAccountArgs) GetAccount() string {
  return p.Account
}
func (p *GameOperatorBlockAccountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorBlockAccountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *GameOperatorBlockAccountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("blockAccount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorBlockAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *GameOperatorBlockAccountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorBlockAccountArgs(%+v)", *p)
}

type GameOperatorBlockAccountResult struct {
}

func NewGameOperatorBlockAccountResult() *GameOperatorBlockAccountResult {
  return &GameOperatorBlockAccountResult{}
}

func (p *GameOperatorBlockAccountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameOperatorBlockAccountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("blockAccount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameOperatorBlockAccountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameOperatorBlockAccountResult(%+v)", *p)
}


